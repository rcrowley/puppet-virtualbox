#!/bin/sh

set -e

#/ Usage: vbox up [--gui] <name>
#/   --gui  start with a GUI
#/   <name> VM name

: ${BASE:="$HOME/VirtualBox VMs"}
: ${TYPE:="headless"}

usage() {
    grep "^#/" "$0" | cut -c"4-" >&2
    exit "$1"
}
while [ "$#" -gt 0 ]
do
    case "$1" in
        --gui) TYPE="gui" shift;;
        -h|--help) usage 0;;
        *) break;;
    esac
done
NAME="$1"
[ "$NAME" ] || usage 1

# Decide what port to use.
mkdir -p "$HOME/.vbox/portmap/names" "$HOME/.vbox/portmap/ports"
if [ -f "$HOME/.vbox/portmap/names/$NAME" ]
then
    PORT="$(cat "$HOME/.vbox/portmap/names/$NAME")"
else
    OLDPORT="$(
        find "$HOME/.vbox/portmap/ports" -type "f" |
        xargs basename |
        sort -nr |
        head -n"1"
    )"
    if [ "$OLDPORT" ]
    then PORT="$(($OLDPORT + 1))"
    else PORT="2200"
    fi
    echo "$PORT" >"$HOME/.vbox/portmap/names/$NAME"
    echo "$NAME" >"$HOME/.vbox/portmap/ports/$PORT"
fi

wait_for_ssh() {
    while true
    do
        expect -c "
            spawn /usr/bin/ssh -lroot -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p$PORT localhost echo hi
            expect {
                \"password:\" {
                    send \"password\\n\"
                    interact
                }
                failed exit
                timeout exit
            }
        " |
        egrep -q "^hi.?$" &&
        break
        sleep 10
    done
}

# Create the VM, unless it already exists, in which case, short-circuit
# to start it and be done.
VBoxManage createvm --name "$NAME" --basefolder "$BASE" --register || {
    VBoxManage startvm "$NAME" --type "$TYPE"
    wait_for_ssh
    exit 0
}

# Create the "~/VirtualBox VMs" directory.
mkdir -p "$BASE"

# Setup the VM for Ubuntu Linux.
VBoxManage modifyvm "$NAME" \
    --ostype "Ubuntu_64" \
    --memory 4096 \
    --vram 12 \
    --acpi "on" --ioapic "on" \
    --cpus 1 \
    --pae "off" \
    --hwvirtex "on" \
    --hwvirtexexcl "off" \
    --nestedpaging "on" \
    --accelerate3d "off" \
    --nic1 "nat" \
    --natpf1 "guestssh,tcp,,$PORT,,22" \
    --boot1 "disk" \
    --boot2 "net" \
    --audio "none" \
    --clipboard "disabled" \
    --usb "off" --usbehci "off" \
    --vrde "off" \
    --teleporter "off"

# Specify the TFTP root directory and pxelinux.0 file.  VirtualBox has
# some stupid ideas about the defaults, which we don't follow.
#
# <http://pinboard.in/u:rcrowley/t:virtualbox/t:pxeboot/>
VBoxManage setextradata "$NAME" \
    "VBoxInternal/Devices/pcnet/0/LUN#0/Config/BootFile" \
    "pxelinux.0"
VBoxManage setextradata "$NAME" \
    "VBoxInternal/Devices/pcnet/0/LUN#0/Config/TFTPPrefix" \
    "$(cd "$(dirname "$(dirname "$0")")/lib/vbox-tftpboot" && pwd)"
VBoxManage setextradata "$NAME" \
    "VBoxInternal/Devices/pcnet/0/LUN#0/AttachedDriver/Config/BootFile" \
    "pxelinux.0"
VBoxManage setextradata "$NAME" \
    "VBoxInternal/Devices/pcnet/0/LUN#0/AttachedDriver/Config/TFTPPrefix" \
    "$(cd "$(dirname "$(dirname "$0")")/lib/vbox-tftpboot" && pwd)"

# Create and attach a 40GB virtual disk.
VBoxManage storagectl "$NAME" --name "SATA" --add "sata"
VBoxManage createhd \
    --filename "$BASE/$NAME/$NAME.vmdk" \
    --format "VMDK" \
    --size "40960"
VBoxManage storageattach "$NAME" \
    --storagectl "SATA" \
    --port 0 --device 0 \
    --type "hdd" \
    --medium "$BASE/$NAME/$NAME.vmdk"

# Start a web server that will serve the preseed file.
ruby "$(dirname "$(dirname "$0")")/lib/vbox-preseed.rb" \
    "$(dirname "$(dirname "$0")")/lib/vbox-preseed" &
trap "kill \"$!\"; sleep 1; kill \"$!\"; while ps aux | grep -q \"$!\"; do sleep 1; done" EXIT INT QUIT TERM

# Start the VM.
VBoxManage startvm "$NAME" --type "$TYPE"

# Sleep good and long to let the installation get started.
echo "This will take about 15 minutes." >&2
sleep 300

# Wait until SSH becomes available.
wait_for_ssh

# Authorize the local user's public key in the VM.
expect -c "
    spawn /usr/bin/ssh -lroot -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p$PORT localhost mkdir -m700 -p .ssh && echo $(cat "$HOME/.ssh/id_rsa.pub")-root >.ssh/authorized_keys
    expect {
        \"password:\" {
            send \"password\\n\"
            interact
        }
        failed exit
        timeout exit
    }
"
